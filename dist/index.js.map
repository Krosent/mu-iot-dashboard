{"version":3,"sources":["app.js","index.js"],"names":["solidNodeClient","require","express","html","app","get","_","res","set","client","SolidNodeClient","login","idp","username","password","getSession","then","session","console","log","JSON","stringify","info","webId","catch","error","status","send","req","params","isLoggedIn","module","exports","port","listen"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["const solidNodeClient = require(\"solid-node-client\");\n\nconst express = require(\"express\");\n\nconst html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <title>A JavaScript project</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body>\n  <h1>A JavaScript project</h1>\n</body>\n</html>`;\n\nconst app = express();\n\napp.get('/', async (_, res) => {\n  res.set('Content-Type', 'text/html');\n  const client = new solidNodeClient.SolidNodeClient();\n  await client.login({\n    idp: 'https://solidcommunity.net', // e.g. https://solidcommunity.net\n    username: 'iot-solid-bot',\n    password: 'kDLpdi!LK2AV84k',\n  });\n\n  /* idp: 'https://broker.pod.inrupt.com', // e.g. https://solidcommunity.net\n    username: 'iot-solid-bot',\n    password: 'kDLpdi!LK2AV84k',\n  */\n\n  /* idp: 'https://broker.pod.inrupt.com', // e.g. https://solidcommunity.net\n    username: 'krosent',\n    password: 'ggUAL#H8dxcYw6q',\n  */\n\n  // console.log(`client: ${JSON.stringify(client)}`);\n\n  client\n    .getSession()\n    .then((session) =>\n      console.log(`Session: ${JSON.stringify(session.info.webId)}`))\n    .catch((error) => console.log(`We have error: ${error}`));\n\n  res.status(200).send(html);\n});\n\napp.get('/authorize/:username/:password', async (req, res) => {\n  console.log(`username: ${req.params.username}`);\n  console.log(`password: ${req.params.password}`);\n\n  const client = new solidNodeClient.SolidNodeClient();\n  await client.login({\n    idp: 'https://solidcommunity.net', // e.g. https://solidcommunity.net\n    username: req.params.username,\n    password: req.params.password,\n  });\n  client\n    .getSession()\n    .then((session) => {\n      console.log(session);\n      if (session.isLoggedIn) {\n        res.status(200).send('Authorized');\n      } else {\n        res.status(405).send('Unauthorized');\n      }\n    })\n    .catch((error) => res.status(405).send('Unauthorized'));\n});\n\nmodule.exports = app;\n","const app = require('./app');\n\nconst port = '8888';\n\napp.listen(port, () => {\n  console.log(`Server is listening on port ${port}...`);\n});\n"]}